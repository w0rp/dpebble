/**
 * This module defines resources for Pebble projects, and how to handle them.
 */
module pebble.resource;

@nogc:
nothrow:

struct ResourceHandle {}

/**
 * Opaque reference to a resource.
 *
 * See_Also: resource_get_handle()
 */
deprecated("Use ResourceHandle* instead.")
alias ResourceHandle* ResHandle;

// TODO: Define this.
// #define RESOURCE_ID_FONT_FALLBACK RESOURCE_ID_GOTHIC_14

/**
 * Gets the resource handle for a file identifier.
 *
 * The resource IDs are auto-generated by the Pebble build process, based
 * on the `appinfo.json`. The "name" field of each resource is prefixed
 * by `RESOURCE_ID_` and made visible to the application (through the
 * `build/src/resource_ids.auto.h` header which is automatically included).
 *
 * For example, given the following fragment of `appinfo.json`:
 *     ...
 *     "resources" : {
 *         "media": [
 *             {
 *                 "name": "MY_ICON",
 *                 "file": "img/icon.png",
 *                 "type": "png",
 *             },
 *          ...
 *
 * The generated file identifier for this resource is `RESOURCE_ID_MY_ICON`.
 * To get a resource handle for that resource write:
 *
 * ResHandle rh = resource_get_handle(RESOURCE_ID_MY_ICON);
 *
 * Params:
 * resource_id = The resource ID.
 */
extern(C) ResourceHandle* resource_get_handle(uint resource_id);

/**
 * Gets the size of the resource given a resource handle.
 *
 * Params:
 * h = The handle to the resource
 *
 * Returns: The size of the resource in bytes.
 */
extern(C) size_t resource_size(ResourceHandle* h);

/**
 * Copies the bytes for the resource with a given handle from flash storage
 * into a given buffer.
 *
 * Params:
 * h = The handle to the resource.
 * buffer = The buffer to load the resource data into.
 * max_length = The maximum number of bytes to copy.
 *
 * Returns: The number of bytes actually copied.
 */
extern(C) size_t resource_load
(ResourceHandle* h, ubyte* buffer, size_t max_length);

/**
 * Copies a range of bytes from a resource with a given handle into a
 * given buffer.
 *
 * Params:
 * h = The handle to the resource.
 * start_offset = The offset in bytes at which to start reading from the
 *     resource.
 * buffer = The buffer to load the resource data into.
 * num_bytes = The maximum number of bytes to copy.
 *
 * Returns: The number of bytes actually copied.
 */
extern(C) size_t resource_load_byte_range
(ResourceHandle* h, uint start_offset, ubyte* buffer, size_t num_bytes);

